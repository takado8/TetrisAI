package tetris.environment.display;


import static tetris.environment.engine.Constants.GAME_FIELD_SIZE_X;

/**
 * {@code Display} constants
 */
public class Constants {
    public static final String SCENE_BACKGROUND_COLOR_HEX = "#222222";
    public static final String GAME_FIELD_BACKGROUND_COLOR_HEX = "#4e4e50";
    public static final String BRICK_STROKE_COLOR_HEX = "#000000";
    public static final String GAME_FIELD_STROKE_COLOR_HEX = "#666666";
    public static final String SCORE_LABEL_TXT = "Score: ";

    public static final double SCENE_SIZE_Y = 650;
    public static final double SCENE_SIZE_X = 550;
    public static final double GAME_FIELD_MARGIN_PERCENT = 0.09;  // %
    public static final double GAME_FIELD_DISPLAY_SIZE_Y = SCENE_SIZE_Y * (1 - GAME_FIELD_MARGIN_PERCENT);
    public static final double GAME_FIELD_DISPLAY_SIZE_X = GAME_FIELD_DISPLAY_SIZE_Y / 2;
    public static final double GAME_FIELD_DISPLAY_MARGIN = (SCENE_SIZE_Y - GAME_FIELD_DISPLAY_SIZE_Y) / 2;
    public static final double BRICK_STROKE_WIDTH = 0.5;
    public static final double BRICK_DISPLAY_SIZE_ACTUAL = GAME_FIELD_DISPLAY_SIZE_X / GAME_FIELD_SIZE_X;
    public static final double BRICK_DISPLAY_SIZE_ADJUSTED = BRICK_DISPLAY_SIZE_ACTUAL - BRICK_STROKE_WIDTH;
    public static final double DELAY_SECONDS_SLOW = 0.75;
    public static final double DELAY_SECONDS_NORMAL = 0.5;
    public static final double DELAY_SECONDS_FAST = 0.3;
    public static final double DELAY_SECONDS_AI = 0.016;
    public static final double DELAY_SECONDS_SPEEDUP = 0.04;
    public static final double DELAY_SECONDS_DROP = 0.009;
    public static final double RESPONSE_DELAY_SECONDS = 0.15;
    public static final double NANOSECONDS_IN_SECOND = 1_000_000_000.0;
    public static final double[] AGENT_CHROMOSOME = {-0.09624703038025331, 0.06396764840076265, 0.06973423505419958, 0.006695192764271266, 0.21851750923223348, -0.126438296515597, -0.04887794952698659, -0.16670919154495634, 0.03354358961365554, 0.16586545839160396, -0.16707794834324696, -0.03401099504037838, 0.04776612939921475, 0.17832626335269655, -5.342264479282243E-4, 0.07866492584501213, -0.045277640570925856, -0.021782888172366913, -0.10991385811344172, -0.059690324966778736, 0.10811367776728659, -0.031069284971873966, 0.10356243643365627, 0.14879645933281382, 0.18803593498596813, -0.06410644565165141, -0.09816542545526881, -0.18990365762945477, 0.07202298688961488, -0.022841528465483752, -0.11819324793394645, -0.039190797463449945, 0.0025182973512777656, 0.02383117989510525, -0.042191929896331755, -0.0717965280546983, -0.2760755461773562, -0.03756831788519983, -0.09499852106312887, 0.020987689933459175, -0.17349637280120567, -0.009437047199509645, 0.14102400358922532, -0.11240737084926238, -0.15024160128542077, 0.01285823752623792, -0.030884994876950567, -0.011047918661734055, 0.07024221749161925, -0.1280149459832984, 0.006382280561168246, 0.10301978876204633, 0.055794836213932636, 0.03468991135884298, 0.13507812529436086, -0.24954523039786092, -0.2916899189944336, -0.02430503052172275, 0.007802500662304347, -0.18549203319013108, 0.22661416915993451, -0.15481551428738577, 0.0627843994032267, 0.012685611561966527, 0.13390181587988037, -0.05190415765215756, -0.19241892287194767, 0.2541935836198339};

}


